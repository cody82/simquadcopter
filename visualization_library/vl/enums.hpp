/*
  Copyright (C) 2008 Michele Bosi

  This file is part of Visualization Library.

  Visualization Library is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Visualization Library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Visualization Library. If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef enums_INCLUDE_DEFINE
#define enums_INCLUDE_DEFINE

namespace vl
{
  typedef enum 
  {
    TF_ALPHA   = GL_ALPHA, 
    TF_ALPHA4  = GL_ALPHA4, 
    TF_ALPHA8  = GL_ALPHA8, 
    TF_ALPHA12 = GL_ALPHA12, 
    TF_ALPHA16 = GL_ALPHA16, 

    TF_INTENSITY   = GL_INTENSITY, 
    TF_INTENSITY4  = GL_INTENSITY4, 
    TF_INTENSITY8  = GL_INTENSITY8, 
    TF_INTENSITY12 = GL_INTENSITY12, 
    TF_INTENSITY16 = GL_INTENSITY16, 
    TF_LUMINANCE   = GL_LUMINANCE, 
    TF_LUMINANCE4  = GL_LUMINANCE4, 
    TF_LUMINANCE8  = GL_LUMINANCE8, 
    TF_LUMINANCE12 = GL_LUMINANCE12, 
    TF_LUMINANCE16 = GL_LUMINANCE16, 
    TF_LUMINANCE_ALPHA     = GL_LUMINANCE_ALPHA, 
    TF_LUMINANCE4_ALPHA4   = GL_LUMINANCE4_ALPHA4, 
    TF_LUMINANCE6_ALPHA2   = GL_LUMINANCE6_ALPHA2, 
    TF_LUMINANCE8_ALPHA8   = GL_LUMINANCE8_ALPHA8, 
    TF_LUMINANCE12_ALPHA4  = GL_LUMINANCE12_ALPHA4, 
    TF_LUMINANCE12_ALPHA12 = GL_LUMINANCE12_ALPHA12, 
    TF_LUMINANCE16_ALPHA16 = GL_LUMINANCE16_ALPHA16, 
    TF_R3_G3_B2 = GL_R3_G3_B2, 
    TF_RGB      = GL_RGB, 
    TF_RGB4     = GL_RGB4, 
    TF_RGB5     = GL_RGB5, 
    TF_RGB8     = GL_RGB8, 
    TF_RGB10    = GL_RGB10, 
    TF_RGB12    = GL_RGB12, 
    TF_RGB16    = GL_RGB16, 
    TF_RGBA     = GL_RGBA, 
    TF_RGBA2    = GL_RGBA2, 
    TF_RGBA4    = GL_RGBA4, 
    TF_RGB5_A1  = GL_RGB5_A1, 
    TF_RGBA8    = GL_RGBA8, 
    TF_RGB10_A2 = GL_RGB10_A2, 
    TF_RGBA12   = GL_RGBA12, 
    TF_RGBA16   = GL_RGBA16,

    TF_DEPTH_COMPONENT   = GL_DEPTH_COMPONENT,
    TF_DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16,
    TF_DEPTH_COMPONENT24 = GL_DEPTH_COMPONENT24,
    TF_DEPTH_COMPONENT32 = GL_DEPTH_COMPONENT32,

    TF_COMPRESSED_ALPHA_ARB           = GL_COMPRESSED_ALPHA_ARB,				
    TF_COMPRESSED_INTENSITY_ARB       = GL_COMPRESSED_INTENSITY_ARB,
    TF_COMPRESSED_LUMINANCE_ARB       = GL_COMPRESSED_LUMINANCE_ARB,			
    TF_COMPRESSED_LUMINANCE_ALPHA_ARB = GL_COMPRESSED_LUMINANCE_ALPHA_ARB,			
    TF_COMPRESSED_RGB_ARB             = GL_COMPRESSED_RGB_ARB,				
    TF_COMPRESSED_RGBA_ARB            = GL_COMPRESSED_RGBA_ARB,

    TF_COMPRESSED_RGB_FXT1_3DFX  = GL_COMPRESSED_RGB_FXT1_3DFX,			  
    TF_COMPRESSED_RGBA_FXT1_3DFX = GL_COMPRESSED_RGBA_FXT1_3DFX,			  

    TF_COMPRESSED_RGB_S3TC_DXT1_EXT  = GL_COMPRESSED_RGB_S3TC_DXT1_EXT,                   
    TF_COMPRESSED_RGBA_S3TC_DXT1_EXT = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,               
    TF_COMPRESSED_RGBA_S3TC_DXT3_EXT = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,                  
    TF_COMPRESSED_RGBA_S3TC_DXT5_EXT = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,                 

    TF_COMPRESSED_LUMINANCE_LATC1_EXT        = GL_COMPRESSED_LUMINANCE_LATC1_EXT,                 
    TF_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT,      
    TF_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT  = GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT,        
    TF_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT,

    TF_COMPRESSED_RED_RGTC1_EXT        = GL_COMPRESSED_RED_RGTC1_EXT,                       
    TF_COMPRESSED_SIGNED_RED_RGTC1_EXT = GL_COMPRESSED_SIGNED_RED_RGTC1_EXT,                
    TF_COMPRESSED_RED_GREEN_RGTC2_EXT  = GL_COMPRESSED_RED_GREEN_RGTC2_EXT,                 
    TF_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,          

  } ETextureFormat;
    
  typedef enum
  {
    CBF_RGB   = GL_RGB,
    CBF_RGBA  = GL_RGBA,
    CBF_R3_G3_B2 = GL_R3_G3_B2,
    CBF_RGB4 = GL_RGB4,
    CBF_RGB5 = GL_RGB5,
    CBF_RGB8 = GL_RGB8,
    CBF_RGB10 = GL_RGB10, 
    CBF_RGB12 = GL_RGB12,
    CBF_RGB16 = GL_RGB16, 
    CBF_RGBA2 = GL_RGBA2, 
    CBF_RGBA4 = GL_RGBA4,
    CBF_RGB5_A1 = GL_RGB5_A1, 
    CBF_RGBA8 = GL_RGBA8, 
    CBF_RGB10_A2 = GL_RGB10_A2, 
    CBF_RGBA12 = GL_RGBA12,
    CBF_RGBA16 = GL_RGBA16,

    CBF_FLOAT_R_NV = GL_FLOAT_R_NV, 
    CBF_FLOAT_RG_NV = GL_FLOAT_RG_NV,
    CBF_FLOAT_RGB_NV = GL_FLOAT_RGB_NV, 
    CBF_FLOAT_RGBA_NV = GL_FLOAT_RGBA_NV,
    CBF_FLOAT_R16_NV = GL_FLOAT_R16_NV, 
    CBF_FLOAT_RG16_NV = GL_FLOAT_RG16_NV,
    CBF_FLOAT_RGB16_NV = GL_FLOAT_RGB16_NV, 
    CBF_FLOAT_RGBA16_NV = GL_FLOAT_RGBA16_NV,
    CBF_FLOAT_R32_NV = GL_FLOAT_R32_NV, 
    CBF_FLOAT_RG32_NV = GL_FLOAT_RG32_NV,
    CBF_FLOAT_RGB32_NV = GL_FLOAT_RGB32_NV, 
    CBF_FLOAT_RGBA32_NV = GL_FLOAT_RGBA32_NV
  } EColorBufferFormat;

  typedef enum
  {
    AP_NO_ATTACHMENT = 0,
    AP_COLOR_ATTACHMENT0_EXT  = GL_COLOR_ATTACHMENT0_EXT,
    AP_COLOR_ATTACHMENT1_EXT  = GL_COLOR_ATTACHMENT1_EXT,
    AP_COLOR_ATTACHMENT2_EXT  = GL_COLOR_ATTACHMENT2_EXT,
    AP_COLOR_ATTACHMENT3_EXT  = GL_COLOR_ATTACHMENT3_EXT,
    AP_COLOR_ATTACHMENT4_EXT  = GL_COLOR_ATTACHMENT4_EXT,
    AP_COLOR_ATTACHMENT5_EXT  = GL_COLOR_ATTACHMENT5_EXT,
    AP_COLOR_ATTACHMENT6_EXT  = GL_COLOR_ATTACHMENT6_EXT,
    AP_COLOR_ATTACHMENT7_EXT  = GL_COLOR_ATTACHMENT7_EXT,
    AP_COLOR_ATTACHMENT8_EXT  = GL_COLOR_ATTACHMENT8_EXT,
    AP_COLOR_ATTACHMENT9_EXT  = GL_COLOR_ATTACHMENT9_EXT,
    AP_COLOR_ATTACHMENT10_EXT = GL_COLOR_ATTACHMENT10_EXT,
    AP_COLOR_ATTACHMENT11_EXT = GL_COLOR_ATTACHMENT11_EXT,
    AP_COLOR_ATTACHMENT12_EXT = GL_COLOR_ATTACHMENT12_EXT,
    AP_COLOR_ATTACHMENT13_EXT = GL_COLOR_ATTACHMENT13_EXT,
    AP_COLOR_ATTACHMENT14_EXT = GL_COLOR_ATTACHMENT14_EXT,
    AP_COLOR_ATTACHMENT15_EXT = GL_COLOR_ATTACHMENT15_EXT,
    AP_DEPTH_ATTACHMENT_EXT   = GL_DEPTH_ATTACHMENT_EXT,
    AP_STENCIL_ATTACHMENT_EXT = GL_STENCIL_ATTACHMENT_EXT
  } EAttachmentPoint;

  typedef enum
  {
    CT2D_TEXTURE_2D = GL_TEXTURE_2D,
    CT2D_TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
    CT2D_TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
    CT2D_TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
    CT2D_TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
    CT2D_TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
    CT2D_TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
    CT2D_PROXY_TEXTURE_CUBE_MAP      = GL_PROXY_TEXTURE_CUBE_MAP
  } ECopyTex2D;

  typedef enum
  {
    IF_RGB  = GL_RGB,
    IF_RGBA = GL_RGBA,
    IF_BGR  = GL_BGR,
    IF_BGRA = GL_BGRA,
    IF_RED   = GL_RED,
    IF_GREEN = GL_GREEN,
    IF_BLUE  = GL_BLUE,
    IF_ALPHA = GL_ALPHA,
    IF_LUMINANCE       = GL_LUMINANCE,
    IF_LUMINANCE_ALPHA = GL_LUMINANCE_ALPHA,

    IF_COMPRESSED_RGB_S3TC_DXT1_EXT  = GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
    IF_COMPRESSED_RGBA_S3TC_DXT1_EXT = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
    IF_COMPRESSED_RGBA_S3TC_DXT3_EXT = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
    IF_COMPRESSED_RGBA_S3TC_DXT5_EXT = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
  } EImageFormat;

  typedef enum
  {
    DT_DEPTH_COMPONENT   = GL_DEPTH_COMPONENT,
    DT_DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16,
    DT_DEPTH_COMPONENT24 = GL_DEPTH_COMPONENT24,
    DT_DEPTH_COMPONENT32 = GL_DEPTH_COMPONENT32
  } EDepthType;

  typedef enum
  {
    ST_STENCIL_INDEX1_EXT  = GL_STENCIL_INDEX1_EXT,
    ST_STENCIL_INDEX4_EXT  = GL_STENCIL_INDEX4_EXT,
    ST_STENCIL_INDEX8_EXT  = GL_STENCIL_INDEX8_EXT,
    ST_STENCIL_INDEX16_EXT = GL_STENCIL_INDEX16_EXT
  } EStencilType;

  typedef enum
  {
    CF_CLEAR_NONE          = 0,
    CF_CLEAR_COLOR         = GL_COLOR_BUFFER_BIT,
    CF_CLEAR_DEPTH         = GL_DEPTH_BUFFER_BIT,
    CF_CLEAR_STENCIL       = GL_STENCIL_BUFFER_BIT,
    CF_CLEAR_COLOR_DEPTH   = CF_CLEAR_COLOR + CF_CLEAR_DEPTH,
    CF_CLEAR_COLOR_STENCIL = CF_CLEAR_COLOR + CF_CLEAR_STENCIL,
    CF_CLEAR_DEPTH_STENCIL = CF_CLEAR_DEPTH + CF_CLEAR_STENCIL,
    CF_CLEAR_COLOR_DEPTH_STENCIL = CF_CLEAR_COLOR + CF_CLEAR_DEPTH + CF_CLEAR_STENCIL,
  } EClearFlags;

  typedef enum 
  { 
    BF_ZERO=GL_ZERO, 
    BF_ONE=GL_ONE, 
    BF_SRC_COLOR=GL_SRC_COLOR, 
    BF_ONE_MINUS_SRC_COLOR=GL_ONE_MINUS_SRC_COLOR, 
    BF_DST_COLOR=GL_DST_COLOR, 
    BF_ONE_MINUS_DST_COLOR=GL_ONE_MINUS_DST_COLOR, 
    BF_SRC_ALPHA=GL_SRC_ALPHA, 
    BF_ONE_MINUS_SRC_ALPHA=GL_ONE_MINUS_SRC_ALPHA, 
    BF_DST_ALPHA=GL_DST_ALPHA, 
    BF_ONE_MINUS_DST_ALPHA=GL_ONE_MINUS_DST_ALPHA, 
    BF_CONSTANT_COLOR=GL_CONSTANT_COLOR, 
    BF_ONE_MINUS_CONSTANT_COLOR=GL_ONE_MINUS_CONSTANT_COLOR, 
    BF_CONSTANT_ALPHA=GL_CONSTANT_ALPHA, 
    BF_ONE_MINUS_CONSTANT_ALPHA=GL_ONE_MINUS_CONSTANT_ALPHA, 
    BF_SRC_ALPHA_SATURATE=GL_SRC_ALPHA_SATURATE
  } EBlendFactor;

  typedef enum 
  { 
    TD_TEXTURE_1D=GL_TEXTURE_1D, 
    TD_TEXTURE_2D=GL_TEXTURE_2D, 
    TD_TEXTURE_3D=GL_TEXTURE_3D, 
    TD_TEXTURE_CUBE_MAP=GL_TEXTURE_CUBE_MAP 
  } ETextureDimension;

  typedef enum
  {
    RDB_NONE        = GL_NONE,
    RDB_FRONT_LEFT  = GL_FRONT_LEFT,
    RDB_FRONT_RIGHT = GL_FRONT_RIGHT,
    RDB_BACK_LEFT   = GL_BACK_LEFT,
    RDB_BACK_RIGHT  = GL_BACK_RIGHT,
    RDB_AUX0        = GL_AUX0,
    RDB_AUX1        = GL_AUX1,
    RDB_AUX2        = GL_AUX2,
    RDB_AUX3        = GL_AUX3,
    RDB_COLOR_ATTACHMENT0_EXT  = GL_COLOR_ATTACHMENT0_EXT,
    RDB_COLOR_ATTACHMENT1_EXT  = GL_COLOR_ATTACHMENT1_EXT,
    RDB_COLOR_ATTACHMENT2_EXT  = GL_COLOR_ATTACHMENT2_EXT,
    RDB_COLOR_ATTACHMENT3_EXT  = GL_COLOR_ATTACHMENT3_EXT,
    RDB_COLOR_ATTACHMENT4_EXT  = GL_COLOR_ATTACHMENT4_EXT,
    RDB_COLOR_ATTACHMENT5_EXT  = GL_COLOR_ATTACHMENT5_EXT,
    RDB_COLOR_ATTACHMENT6_EXT  = GL_COLOR_ATTACHMENT6_EXT,
    RDB_COLOR_ATTACHMENT7_EXT  = GL_COLOR_ATTACHMENT7_EXT,
    RDB_COLOR_ATTACHMENT8_EXT  = GL_COLOR_ATTACHMENT8_EXT,
    RDB_COLOR_ATTACHMENT9_EXT  = GL_COLOR_ATTACHMENT9_EXT,
    RDB_COLOR_ATTACHMENT10_EXT = GL_COLOR_ATTACHMENT10_EXT,
    RDB_COLOR_ATTACHMENT11_EXT = GL_COLOR_ATTACHMENT11_EXT,
    RDB_COLOR_ATTACHMENT12_EXT = GL_COLOR_ATTACHMENT12_EXT,
    RDB_COLOR_ATTACHMENT13_EXT = GL_COLOR_ATTACHMENT13_EXT,
    RDB_COLOR_ATTACHMENT14_EXT = GL_COLOR_ATTACHMENT14_EXT,
    RDB_COLOR_ATTACHMENT15_EXT = GL_COLOR_ATTACHMENT15_EXT
  } EReadDrawBuffer;

  typedef enum
  {
    IT_COMPRESSED_TYPE = 0,
    IT_UNSIGNED_BYTE  = GL_UNSIGNED_BYTE,
    IT_BYTE           = GL_BYTE,
    IT_UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
    IT_SHORT          = GL_SHORT,
    IT_UNSIGNED_INT   = GL_UNSIGNED_INT,
    IT_INT            = GL_INT,
    IT_FLOAT          = GL_FLOAT,
    IT_UNSIGNED_BYTE_3_3_2         = GL_UNSIGNED_BYTE_3_3_2,
    IT_UNSIGNED_BYTE_2_3_3_REV     = GL_UNSIGNED_BYTE_2_3_3_REV,
    IT_UNSIGNED_SHORT_5_6_5        = GL_UNSIGNED_SHORT_5_6_5,
    IT_UNSIGNED_SHORT_5_6_5_REV    = GL_UNSIGNED_SHORT_5_6_5_REV,
    IT_UNSIGNED_SHORT_4_4_4_4      = GL_UNSIGNED_SHORT_4_4_4_4,
    IT_UNSIGNED_SHORT_4_4_4_4_REV  = GL_UNSIGNED_SHORT_4_4_4_4_REV,
    IT_UNSIGNED_SHORT_5_5_5_1      = GL_UNSIGNED_SHORT_5_5_5_1,
    IT_UNSIGNED_SHORT_1_5_5_5_REV  = GL_UNSIGNED_SHORT_1_5_5_5_REV,
    IT_UNSIGNED_INT_8_8_8_8        = GL_UNSIGNED_INT_8_8_8_8,
    IT_UNSIGNED_INT_8_8_8_8_REV    = GL_UNSIGNED_INT_8_8_8_8_REV,
    IT_UNSIGNED_INT_10_10_10_2     = GL_UNSIGNED_INT_10_10_10_2,
    IT_UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV
  } EImageType;

  typedef enum
  {
    PT_POINTS         = GL_POINTS,
    PT_LINES          = GL_LINES,
    PT_LINE_LOOP      = GL_LINE_LOOP,
    PT_LINE_STRIP     = GL_LINE_STRIP,
    PT_TRIANGLES      = GL_TRIANGLES,
    PT_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
    PT_TRIANGLE_FAN   = GL_TRIANGLE_FAN,
    PT_QUADS          = GL_QUADS,
    PT_QUAD_STRIP     = GL_QUAD_STRIP,
    PT_POLYGON        = GL_POLYGON
  } EPrimitiveType;

  typedef enum 
  { 
    PF_FRONT=GL_FRONT, 
    PF_BACK=GL_BACK, 
    PF_FRONT_AND_BACK=GL_FRONT_AND_BACK 
  } EPolygonFace;

  typedef enum 
  { 
    HM_FASTEST=GL_FASTEST, 
    HM_NICEST=GL_NICEST, 
    HM_DONT_CARE=GL_DONT_CARE 
  } EHintMode;

  typedef enum 
  { 
    FF_CW=GL_CW, 
    FF_CCW=GL_CCW 
  } EFrontFace;

  typedef enum 
  { 
    FU_NEVER=GL_NEVER, 
    FU_LESS=GL_LESS, 
    FU_EQUAL=GL_EQUAL, 
    FU_LEQUAL=GL_LEQUAL, 
    FU_GREATER=GL_GREATER, 
    FU_NOTEQUAL=GL_NOTEQUAL, 
    FU_GEQUAL=GL_GEQUAL, 
    FU_ALWAYS=GL_ALWAYS 
  } EFunction;

  typedef enum 
  { 
    PM_FILL=GL_FILL, 
    PM_LINE=GL_LINE, 
    PM_POINT=GL_POINT 
  } EPolygonMode;

  typedef enum 
  { 
    SM_FLAT=GL_FLAT, 
    SM_SMOOTH=GL_SMOOTH 
  } EShadeModel;

  typedef enum 
  {
    BE_FUNC_ADD=GL_FUNC_ADD, 
    BE_FUNC_SUBTRACT=GL_FUNC_SUBTRACT, 
    BE_FUNC_REVERSE_SUBTRACT=GL_FUNC_REVERSE_SUBTRACT, 
    BE_MIN=GL_MIN, 
    BE_MAX=GL_MAX 
  } EBlendEquation;

  typedef enum 
  { 
    CM_EMISSION=GL_EMISSION, 
    CM_AMBIENT=GL_AMBIENT, 
    CM_DIFFUSE=GL_DIFFUSE, 
    CM_SPECULAR=GL_SPECULAR, 
    CM_AMBIENT_AND_DIFFUSE=GL_AMBIENT_AND_DIFFUSE 
  } EColorMaterial;

  typedef enum 
  { 
    CC_SEPARATE_SPECULAR_COLOR=GL_SEPARATE_SPECULAR_COLOR, 
    CC_SINGLE_COLOR=GL_SINGLE_COLOR 
  } EColorControl;

  typedef enum 
  {
    FM_LINEAR=GL_LINEAR, 
    FM_EXP=GL_EXP, 
    FM_EXP2=GL_EXP2 
  } EFogMode;

  typedef enum 
  { 
    LO_CLEAR=GL_CLEAR, 
    LO_SET=GL_SET, 
    LO_COPY=GL_COPY, 
    LO_COPY_INVERTED=GL_COPY_INVERTED, 
    LO_NOOP=GL_NOOP, 
    LO_INVERT=GL_INVERT, 
    LO_AND=GL_AND, 
    LO_NAND=GL_NAND, 
    LO_OR=GL_OR, 
    LO_NOR=GL_NOR, 
    LO_XOR=GL_XOR, 
    LO_EQUIV=GL_EQUIV, 
    LO_AND_REVERSE=GL_AND_REVERSE, 
    LO_AND_INVERTED=GL_AND_INVERTED, 
    LO_OR_REVERSE=GL_OR_REVERSE, 
    LO_OR_INVERTED=GL_OR_INVERTED 
  } ELogicOp;

  typedef enum 
  { 
    SF_KEEP=GL_KEEP, 
    SF_ZERO=GL_ZERO, 
    SF_REPLACE=GL_REPLACE, 
    SF_INCR=GL_INCR, 
    SF_DECR=GL_DECR, 
    SF_INVERT=GL_INVERT 
  } EStencilFail;

 typedef enum 
  { 
    TPF_NEAREST=GL_NEAREST, 
    TPF_LINEAR=GL_LINEAR, 
    TPF_NEAREST_MIPMAP_NEAREST=GL_NEAREST_MIPMAP_NEAREST, 
    TPF_LINEAR_MIPMAP_NEAREST=GL_LINEAR_MIPMAP_NEAREST, 
    TPF_NEAREST_MIPMAP_LINEAR=GL_NEAREST_MIPMAP_LINEAR, 
    TPF_LINEAR_MIPMAP_LINEAR=GL_LINEAR_MIPMAP_LINEAR 
  } ETexParamFilter;

  typedef enum 
  { 
    TPW_CLAMP           = GL_CLAMP, 
    TPW_CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
    TPW_CLAMP_TO_EDGE   = GL_CLAMP_TO_EDGE,
    TPW_MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
    TPW_REPEAT          = GL_REPEAT
  } ETexParamWrap;

  typedef enum 
  {
    TEM_DECAL=GL_DECAL, 
    TEM_MODULATE=GL_MODULATE, 
    TEM_ADD=GL_ADD, 
    TEM_BLEND=GL_BLEND, 
    TEM_REPLACE=GL_REPLACE, 
    TEM_COMBINE=GL_COMBINE, 
    TEM_ADD_SIGN=GL_ADD_SIGNED, 
    TEM_INTERPOLATE=GL_INTERPOLATE, 
    TEM_SUBTRACT=GL_SUBTRACT, 
    TEM_DOT3_RGB=GL_DOT3_RGB, 
    TEM_DOT3_RGBA=GL_DOT3_RGBA 
  } ETexEnvMode;

  typedef enum 
  {
    TES_TEXTURE=GL_TEXTURE, 
    TES_TEXTURE0=GL_TEXTURE0, 
    TES_TEXTURE1=GL_TEXTURE1, 
    TES_TEXTURE2=GL_TEXTURE2, 
    TES_TEXTURE3=GL_TEXTURE3, 
    TES_TEXTURE4=GL_TEXTURE4, 
    TES_TEXTURE5=GL_TEXTURE5, 
    TES_TEXTURE6=GL_TEXTURE6, 
    TES_TEXTURE7=GL_TEXTURE7, 
    TES_CONSTANT=GL_CONSTANT,
    TES_PRIMARY_COLOR=GL_PRIMARY_COLOR, 
    TES_PREVIOUS=GL_PREVIOUS
  } ETexEnvSource;

  typedef enum 
  {
    TEO_SRC_COLOR=GL_SRC_COLOR, 
    TEO_ONE_MINUS_SRC_COLOR=GL_ONE_MINUS_SRC_COLOR,
    TEO_SRC_ALPHA=GL_SRC_ALPHA, 
    TEO_ONE_MINUS_SRC_ALPHA=GL_ONE_MINUS_SRC_ALPHA
  } ETexEnvOperand;

  typedef enum 
  {
    TGM_EYE_LINEAR=GL_EYE_LINEAR, 
    TGM_OBJECT_LINEAR=GL_OBJECT_LINEAR, 
    TGM_SPHERE_MAP=GL_SPHERE_MAP, 
    TGM_REFLECTION_MAP=GL_REFLECTION_MAP, 
    TGM_NORMAL_MAP=GL_NORMAL_MAP
  } ETexGenMode;

  typedef enum 
  {
    EN_ALPHA_TEST,
    EN_BLEND,
    EN_COLOR_LOGIC_OP,
    EN_LIGHTING,
    EN_COLOR_MATERIAL,
    EN_COLOR_SUM,
    EN_CULL_FACE,
    EN_DEPTH_TEST,
    EN_FOG,
    EN_LINE_SMOOTH,
    EN_LINE_STIPPLE,
    EN_POLYGON_STIPPLE,
    EN_MULTISAMPLE,
    EN_NORMALIZE,
    EN_POINT_SMOOTH,
    EN_POINT_SPRITE,
    EN_POLYGON_SMOOTH,
    EN_POLYGON_OFFSET_FILL,
    EN_POLYGON_OFFSET_LINE,
    EN_POLYGON_OFFSET_POINT,
    EN_RESCALE_NORMAL,
    EN_SCISSOR_TEST,
    EN_STENCIL_TEST,
    EN_VERTEX_PROGRAM_POINT_SIZE,
    EN_VERTEX_PROGRAM_TWO_SIDE,

    ENABLE_COUNT
  } EEnable;

  typedef enum
  {
    BUF_STREAM_DRAW = GL_STREAM_DRAW, 
    BUF_STREAM_READ = GL_STREAM_READ, 
    BUF_STREAM_COPY = GL_STREAM_COPY, 
    BUF_STATIC_DRAW = GL_STATIC_DRAW, 
    BUF_STATIC_READ = GL_STATIC_READ, 
    BUF_STATIC_COPY = GL_STATIC_COPY, 
    BUF_DYNAMIC_DRAW = GL_DYNAMIC_DRAW, 
    BUF_DYNAMIC_READ = GL_DYNAMIC_READ, 
    BUF_DYNAMIC_COPY = GL_DYNAMIC_COPY
  } EGPUBufferUsage;

  typedef enum
  {
    BUF_READ_ONLY  = GL_READ_ONLY,
    BUF_WRITE_ONLY = GL_WRITE_ONLY, 
    BUF_READ_WRITE = GL_READ_WRITE
  } EGPUBufferAccess;

  typedef enum
  {
    BUF_ARRAY_BUFFER         = GL_ARRAY_BUFFER,
    BUF_ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
    BUF_PIXEL_PACK_BUFFER    = GL_PIXEL_PACK_BUFFER,
    BUF_PIXEL_UNPACK_BUFFER  = GL_PIXEL_UNPACK_BUFFER
  } EGPUBufferType;

  typedef enum
  {

    InheritPublic = 0, 

    InheritHidden,     

    InheritOverride,   

    InheritProtected,  

    InheritOverrideProtected, 
  } EInheritance;

  typedef enum
  {
    AlignLeft    = 1,
    AlignHCenter = 2,
    AlignRight   = 4,
    AlignTop     = 8,
    AlignVCenter = 16,
    AlignBottom  = 32
  } EAlign;

  typedef enum
  {
    TextAlignLeft,
    TextAlignRight,
    TextAlignCenter,
    TextAlignJustify,
  } ETextAlign;

  typedef enum
  {
    Text2D = 1,
    Text3D = 2
  } ETextMode;

  typedef enum
  {
    LeftToRightText,
    RightToLeftText,
    TopToBottomText
  } ETextLayout;

  typedef enum
  {
    NeverDepthSort,
    AlwaysDepthSort,
    AlphaDepthSort
  } EDepthSortMode;

  typedef enum 
  {
    EnableMarkedLists,
    DisableMarkedLists
  } EMarkMode;

  typedef enum
  {
    ActorListNeverExtract,
    ActorListExtractAlways,
    ActorListExtractOnce
  } EActorListExtraction;

  typedef enum
  {
    MIPMAPS_OFF = 0,
    MIPMAPS_ON  = 1
  } EHasMipmaps;

  typedef enum
  {
    BORDER_OFF = 0,
    BORDER_ON  = 1
  } EHasBorder;

  typedef enum
  {
    ImageDimensionError = 0,
    Image1D = 1,
    Image2D = 2,
    Image3D = 3,
    ImageCubeMap = 4
  } EImageDimension;

}

#endif
